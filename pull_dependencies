#!/usr/bin/env bash

# https://github.com/mauriciojost/mavarduino
#
# Mavarduino Dependency Manager
# 
# This script will pull the dependency libraries from GitHub or any 
# other git public repo using the dependency settings with
# an extended platformio-like syntax, for instance: 
# - esp8266/Arduino#master
# - mauriciojost/log4ino-arduino#1.0.0
# - git@bitbucket.org:mauriciojost/main4ino-arduino.git#master
# 
# It picks up files from each repository and simlynks them into 
# src directory.
# 
# This is also an attempt to stop using platformio, because: 
# - the community support is not very mature yet
# - its dependency management features are not satisfactory
# - many interesting libraries do not publish to platformio
#

set -x
set -e

while getopts c:plu option
do
  case "${option}"
  in
    p) SKIP_PULL=true;;
    l) SKIP_LINK=true;;
    u) SKIP_CLEANUP=true;;
    c) CONFIG_FILE=${OPTARG};;
  esac
done

root_dir=`dirname $(readlink -e $0)`
config_file=${CONFIG_FILE:-mavarduino.conf}
libs_dir=$root_dir/libs
src_dir=$root_dir/src

shopt -s extglob

function pull_dependency() {
  local d="$1"
  if [[ "$d" =~ ^(.*)/(.*)\.git#(.*):(.*)$ ]]; 
  then 
    local giturl=${BASH_REMATCH[1]}/${BASH_REMATCH[2]}.git
    local gitproject=${BASH_REMATCH[2]}
    local gitbranch=${BASH_REMATCH[3]}
    local gitfiles=${BASH_REMATCH[4]}
  elif [[ "$d" =~ ^(.*)/(.*)#(.*):(.*)$ ]]; 
  then 
    local gituser=${BASH_REMATCH[1]}
    local gitproject=${BASH_REMATCH[2]}
    local giturl="https://github.com/$gituser/$gitproject.git"
    local gitbranch=${BASH_REMATCH[3]}
    local gitfiles=${BASH_REMATCH[4]}
  else 
    echo "Unkown syntax, discarding: $d"
  fi

  if [ -z "$SKIP_PULL" ]
  then
    echo "Pulling: $giturl / $gitbranch (files: $gitfiles)"
    cd $libs_dir
    git clone "$giturl"
    cd $gitproject
    git checkout "$gitbranch"
    cd ..
  fi

  if [ -z "$SKIP_LINK" ]
  then
    local dep_dir="$gitproject"
    if [ "$gitfiles" == "none" ]
    then
      echo "Linking no file"
    else
      echo "Linking $dep_dir/$gitfiles to $src_dir/..."
      ln -svf `readlink -e $dep_dir/$gitfiles` $src_dir/
    fi
  fi

}


echo "### Reading configuration file $config_file ..."
source $config_file

echo "### Performing cleanup ..."
if [ -z "$SKIP_CLEANUP" ]
then
  rm -fr "$libs_dir"
  find ./src -type l -delete # delete symlinks
  mkdir -p "$libs_dir"
fi

echo "### Pulling dependencies ..."
for dep in $lib_deps_external
do
  pull_dependency "$dep"
done


echo "### Launching after pull script ..."
cd $root_dir
after_pull # Must be defined in the configuration file

echo "### Done"
