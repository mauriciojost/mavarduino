#!/usr/bin/env bash

# https://github.com/mauriciojost/mavarduino
#
# Mavarduino Firmware Uploader (ESP8266)
# 
# This script will allow to:
# - compile and upload firmware (via serial and OTA)
# - upload SPIFF files
#


set -e
set -x

curr_dir=$(dirname $(readlink -e $0))
source $curr_dir/source.sh

function usage() {
  echo "usage: TODO"
}

while getopts n:p:fms:vyeibo:t:h option
do
  case "${option}"
  in
    n) PIO_ENVIRONMENT=${OPTARG};;
    p) PROFILE=${OPTARG};;
    f) UPLOAD_FIRMWARE=true;;
    m) MONITOR=true;;
    s) UPLOAD_FS_DIR=${OPTARG};;
    v) PLATFORMIO_RUN_PARAMS="-v";;
    y) IGNORE_UNCOMMITED_CHANGES=true;;
    e) EXPORT_FIRMWARE_FILE=true;;
    i) EXPORT_FIRMWARE_FILE_VERSION=true;;
    b) BACKUP_IMAGE=true;;
    o) UPLOAD_OTA_IP=${OPTARG};;
    t) FEATURE=${OPTARG};;
    h) usage
  esac
done

VERSION_FROM_LIBRARY_JSON=$(cat library.json | jq -r .version)
COMMIT_ID="`git rev-parse --short HEAD`" # current commit id
COMMIT_ID_LONG="`git rev-parse HEAD`" # current commit id
set +e
COMMIT_ID_OF_VERSION_TAG="`git log -1 $VERSION_FROM_LIBRARY_JSON --format=%H`" # commit id with the tag
set -e
COMMIT_NUMBER_SINCE_FIRST_COMMIT="`git rev-list HEAD --count`"
BRANCH_NAME=${BRANCH_NAME:-"`git rev-parse --abbrev-ref HEAD`"}

if [ "$COMMIT_ID_OF_VERSION_TAG" == "$COMMIT_ID_LONG" ] # for it to work: Branch sources -> Git -> Advanced clone behaviour -> Fetch tags = enabled
then
  RESOLVED_VERSION="$VERSION_FROM_LIBRARY_JSON" 
else
  RESOLVED_VERSION="`bump $VERSION_FROM_LIBRARY_JSON PATCH`-$COMMIT_NUMBER_SINCE_FIRST_COMMIT" 
fi

if [ -n "$EXPORT_FIRMWARE_FILE_VERSION" ]
then
  echo "$RESOLVED_VERSION"
  exit 0
fi

LOG_SUBDIR=images

if [ -z "$PROFILE" ]
then
  echo "Variable -p PROFILE is mandatory"
  exit 1
fi

echo "### Using profile $PROFILE..."
CONSTANT_PROFILE=profiles/constants.prof
export PLATFORMIO_BUILD_FLAGS="-D PROJ_VERSION=$RESOLVED_VERSION $(cat $CONSTANT_PROFILE | grep -v '^#') $(cat $PROFILE | grep -v '^#')" 

echo "### Resolved version: $RESOLVED_VERSION"
echo "### Platformio build flags: $PLATFORMIO_BUILD_FLAGS"

# For uploading a compilation is required, so no need to force it here
if [ -z "$UPLOAD_FIRMWARE" ]
then
  echo "### Compiling..."
  platformio run -e $PIO_ENVIRONMENT $PLATFORMIO_RUN_PARAMS
fi

if [ -n "$EXPORT_FIRMWARE_FILE" ]
then

  if [ -n "$FEATURE" ] # specified explicitly
  then
    if [[ $BRANCH_NAME == feature/* ]] # collision with feature coming from branch
    then
      FEATURE_FROM_BRANCH=`echo $BRANCH_NAME | sed 's/feature\///'`
      FIRMWARE_FILENAME_BASE="firmware-${RESOLVED_VERSION}_$FEATURE$FEATURE_FROM_BRANCH.$PIO_ENVIRONMENT" # use both
    else
      FIRMWARE_FILENAME_BASE="firmware-${RESOLVED_VERSION}_$FEATURE.$PIO_ENVIRONMENT"
    fi
  elif [[ $BRANCH_NAME == feature/* ]]
  then
    FEATURE=`echo $BRANCH_NAME | sed 's/feature\///'`
    FIRMWARE_FILENAME_BASE="firmware-${RESOLVED_VERSION}_$FEATURE.$PIO_ENVIRONMENT"
  else
    FIRMWARE_FILENAME_BASE="firmware-$RESOLVED_VERSION.$PIO_ENVIRONMENT"
  fi

  echo "### Exporting firmware file..."

  EXPORT_SUBDIR=exports/$PIO_ENVIRONMENT/feature=$FEATURE/
  rm -fr $EXPORT_SUBDIR/
  mkdir -p $EXPORT_SUBDIR/

  cp .pioenvs/$PIO_ENVIRONMENT/firmware.bin $EXPORT_SUBDIR/$FIRMWARE_FILENAME_BASE.bin
  cp .pioenvs/$PIO_ENVIRONMENT/firmware.elf $EXPORT_SUBDIR/$FIRMWARE_FILENAME_BASE.elf
  if [ -e main4ino-description.json ]
  then
    cp main4ino-description.json $EXPORT_SUBDIR/$FIRMWARE_FILENAME_BASE.description.json
  fi
fi

if [ -n "$UPLOAD_FIRMWARE" ]
then

  echo "### Will upload firmware..."

  if [ -z "$IGNORE_UNCOMMITED_CHANGES" ]
  then
    echo "### Checking if no changes to be committed..."
    git diff --exit-code
  fi
  if [ -n "$UPLOAD_OTA_IP" ]
  then
    UPLOAD_COMMAND_SUFFIX="--upload-port $UPLOAD_OTA_IP"
  fi

  echo "### Uploading..."
  platformio run -e $PIO_ENVIRONMENT --target upload $UPLOAD_COMMAND_SUFFIX

  if [ -n "$BACKUP_IMAGE" ]
  then
    echo "### Backing up image..."
    mkdir -p $LOG_SUBDIR/$RESOLVED_VERSION/
    rm -f $LOG_SUBDIR/$RESOLVED_VERSION/*
    find . -name *.elf | xargs -I% cp -f % $LOG_SUBDIR/$RESOLVED_VERSION/
  fi

fi

if [ -n "$UPLOAD_FS_DIR" ]
then
  echo "### Will upload tuning to file-system..."
  TUNING_PATH="$UPLOAD_FS_DIR"
  rm -fr data
  ln -s `readlink -e $TUNING_PATH` data
  echo "### Uploading $TUNING_PATH"
  platformio run -e $PIO_ENVIRONMENT --target buildfs
  platformio run -e $PIO_ENVIRONMENT --target uploadfs
fi


if [ -n "$MONITOR" ]
then
  echo "### Backing up logs..."
  mkdir -p $LOG_SUBDIR/$RESOLVED_VERSION/
  echo "### Monitoring..."
  { ./serial_monitor 0 > >(tee $LOG_SUBDIR/$RESOLVED_VERSION/stdout.txt ); } 2> >(tee $LOG_SUBDIR/$RESOLVED_VERSION/stderr.txt )
fi

echo "Done."


