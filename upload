#!/usr/bin/env bash

# https://github.com/mauriciojost/mavarduino
#
# Mavarduino Firmware Uploader (ESP8266)
# 
# This script will allow to:
# - compile and upload firmware (via serial and OTA)
# - upload SPIFF files
#


set -e
set -x

curr_dir=$(dirname $(readlink -e $0))
source $curr_dir/source.sh

export_basedir=exports
log_basedir=images

function usage() {
  cat <<EOL
  $0 [-h | -p profile [-n env] [-t feature] [-f [-o ip]] [-s dir] [-m] [-e] [-i] [-v] [-y] [-b] ]
    -h                      # show this help

    # configuration
    -p Profile_file         # define profile file to be used
    -n pio_eNvironment      # define environment (esp8266, esp32, ...)
    -t feaTure              # define the provided feature (will be used when versioning and file naming)

    # tasks
    -f                      # upload firmware
    -o upload_Ota_ip        # when uploading firmware, use OTA with provided IP
    -s upload_fS_dir        # upload files within provided directory
    -m                      # monitor serial port after upload
    -e                      # export firmware file with rich naming under directory $export_basedir
    -i                      # display firmware file version

    # debugging / development
    -v                      # platformio in verbose mode
    -y                      # ignore git uncommitted changes

    # ci/cd
    -b                      # backup the generated image under directory $log_basedir
EOL
  exit 0

}

while getopts n:p:fms:vyeibo:t:h option
do
  case "${option}"
  in
    n) flag_pio_environment=${OPTARG};;
    p) flag_profile=${OPTARG};;
    f) upload_firmware=true;;
    m) serial_monitor=true;;
    s) upload_fs_dir=${OPTARG};;
    v) platformio_run_params="-v";;
    y) ignore_uncommited_changes=true;;
    e) export_firmware_file=true;;
    i) display_firmware_file_version=true;;
    b) backup_image=true;;
    o) upload_ota_ip=${OPTARG};;
    t) flag_feature=${OPTARG};;
    h) usage
  esac
done

expected_platformio_version=5.1.1
if [ $(platformio --version | awk '{print $4}') != "$expected_platformio_version" ]
then
  echo "Wrong platformio version: must be $expected_platformio_version but found"
  platformio --version
  exit 1
fi

version_from_library_json=$(cat library.json | jq -r .version)
commit_id="`git rev-parse --short HEAD`" # current commit id
commit_id_long="`git rev-parse HEAD`" # current commit id
set +e
commit_id_of_version_tag="`git log -1 $version_from_library_json --format=%H`" # commit id with the tag
set -e
commit_number_since_first_commit="`git rev-list HEAD --count`"
BRANCH_NAME=${BRANCH_NAME:-"`git rev-parse --abbrev-ref HEAD`"}

if [ "$commit_id_of_version_tag" == "$commit_id_long" ] # for it to work: Branch sources -> Git -> Advanced clone behaviour -> Fetch tags = enabled
then
  resolved_version="$version_from_library_json" 
else
  resolved_version="`bump $version_from_library_json PATCH`-$commit_number_since_first_commit" 
fi

if [ -n "$display_firmware_file_version" ]
then
  echo "$resolved_version"
  exit 0
fi

if [ -z "$flag_profile" ]
then
  echo "Variable -p flag_profile is mandatory"
  exit 1
fi

echo "### Using profile $flag_profile..."
constant_profile=profiles/constants.prof
export PLATFORMIO_BUILD_FLAGS="-D PROJ_VERSION=$resolved_version $(cat $constant_profile | grep -v '^#') $(cat $flag_profile | grep -v '^#')" 

echo "### Resolved version: $resolved_version"
echo "### Platformio build flags: $PLATFORMIO_BUILD_FLAGS"

# For uploading a compilation is required, so no need to force it here
if [ -z "$upload_firmware" ]
then
  echo "### Compiling..."
  platformio run -e $flag_pio_environment $platformio_run_params
fi

if [ -n "$export_firmware_file" ]
then

  if [ -n "$flag_feature" ] # specified explicitly
  then
    if [[ $BRANCH_NAME == feature/* ]] # collision with feature coming from branch
    then
      feature_from_branch=`echo $BRANCH_NAME | sed 's/feature\///'`
      firmware_filename_base="firmware-${resolved_version}_$flag_feature$feature_from_branch.$flag_pio_environment" # use both
    else
      firmware_filename_base="firmware-${resolved_version}_$flag_feature.$flag_pio_environment"
    fi
  elif [[ $BRANCH_NAME == feature/* ]]
  then
    flag_feature=`echo $BRANCH_NAME | sed 's/feature\///'`
    firmware_filename_base="firmware-${resolved_version}_$flag_feature.$flag_pio_environment"
  else
    firmware_filename_base="firmware-$resolved_version.$flag_pio_environment"
  fi

  echo "### Exporting firmware file..."

  export_subdir=$export_basedir/$flag_pio_environment/feature=$flag_feature/
  rm -fr $export_subdir/
  mkdir -p $export_subdir/

  cp .pioenvs/$flag_pio_environment/firmware.bin $export_subdir/$firmware_filename_base.bin
  cp .pioenvs/$flag_pio_environment/firmware.elf $export_subdir/$firmware_filename_base.elf
  if [ -e main4ino-description.json ]
  then
    cp main4ino-description.json $export_subdir/$firmware_filename_base.description.json
  fi
fi

if [ -n "$upload_firmware" ]
then

  echo "### Will upload firmware..."

  if [ -z "$ignore_uncommited_changes" ]
  then
    echo "### Checking if no changes to be committed..."
    git diff --exit-code
  fi
  if [ -n "$upload_ota_ip" ]
  then
    UPLOAD_COMMAND_SUFFIX="--upload-port $upload_ota_ip"
  fi

  echo "### Uploading..."
  platformio run -e $flag_pio_environment --target upload $UPLOAD_COMMAND_SUFFIX

  if [ -n "$backup_image" ]
  then
    echo "### Backing up image..."
    mkdir -p $log_basedir/$resolved_version/
    rm -f $log_basedir/$resolved_version/*
    find . -name *.elf | xargs -I% cp -f % $log_basedir/$resolved_version/
  fi

fi

if [ -n "$upload_fs_dir" ]
then
  echo "### Will upload tuning to file-system..."
  TUNING_PATH="$upload_fs_dir"
  rm -fr data
  ln -s `readlink -e $TUNING_PATH` data
  echo "### Uploading $TUNING_PATH"
  platformio run -e $flag_pio_environment --target buildfs
  platformio run -e $flag_pio_environment --target uploadfs
fi


if [ -n "$serial_monitor" ]
then
  echo "### Backing up logs..."
  mkdir -p $log_basedir/$resolved_version/
  echo "### Monitoring..."
  { ./serial_monitor 0 > >(tee $log_basedir/$resolved_version/stdout.txt ); } 2> >(tee $log_basedir/$resolved_version/stderr.txt )
fi

echo "Done."


